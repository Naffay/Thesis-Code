# -*- coding: utf-8 -*-
"""3.1 User Behavior Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q-5vKDj7VhbDmHChp9ZaXCmOzZmCf5v3
"""

# Step 1: Imports
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN
from datetime import datetime
import seaborn as sns

# Step 2: Load and clean data
df = pd.read_excel("export_UiS Living Lab - 2024 v1.xlsx")
df['Time (UTC)'] = pd.to_datetime(df['Time (UTC)'].astype(str).str.replace("Z", ""), errors='coerce')
df = df[df['Time (UTC)'].notna()]
df['Time (UTC)'] = df['Time (UTC)'].dt.tz_localize(None)
df = df[(df["Time (UTC)"] >= "2024-01-01") & (df["Time (UTC)"] <= "2024-03-31")]
df.set_index("Time (UTC)", inplace=True)

# Step 3: Sum socket-level consumption per apartment
df['H101_total'] = df[[c for c in df.columns if c.startswith("H101 ")]].sum(axis=1)
df['H102_total'] = df[[c for c in df.columns if c.startswith("H102 ")]].sum(axis=1)

# Step 4: Resample to hourly and reshape into long format
hourly = df[['H101_total', 'H102_total']].resample('h').sum()
hourly = hourly.reset_index()
h101 = hourly[['Time (UTC)', 'H101_total']].rename(columns={'H101_total': 'EnergyUsage'})
h102 = hourly[['Time (UTC)', 'H102_total']].rename(columns={'H102_total': 'EnergyUsage'})
h101['Apartment'] = 'H101'
h102['Apartment'] = 'H102'
combined = pd.concat([h101, h102])
combined['Hour'] = combined['Time (UTC)'].dt.hour
combined['DayOfWeek'] = combined['Time (UTC)'].dt.dayofweek

# Step 5: Normalize and cluster with KMeans
scaler = StandardScaler()
X = scaler.fit_transform(combined[['EnergyUsage', 'Hour', 'DayOfWeek']])
kmeans = KMeans(n_clusters=3, random_state=42)
combined['ProfileCluster'] = kmeans.fit_predict(X)

# Step 6: Interpret clusters
centers = scaler.inverse_transform(kmeans.cluster_centers_)
labels = []
for usage, hour, day in centers:
    if usage < 0.2:
        labels.append("Idle")
    elif hour < 12:
        labels.append("Daytime User")
    else:
        labels.append("Evening User")

cluster_map = {i: labels[i] for i in range(len(labels))}
combined['ProfileLabel'] = combined['ProfileCluster'].map(cluster_map)

# Step 7: DBSCAN Anomaly Detection (per cluster)
combined['AnomalyFlag'] = 0  # Default: 0 = normal

for cluster_id in combined['ProfileCluster'].unique():
    cluster_data = combined[combined['ProfileCluster'] == cluster_id]
    if len(cluster_data) >= 5:  # DBSCAN requires at least min_samples=5
        cluster_X = scaler.transform(cluster_data[['EnergyUsage', 'Hour', 'DayOfWeek']])
        dbscan = DBSCAN(eps=1.5, min_samples=5)
        labels = dbscan.fit_predict(cluster_X)
        # -1 means anomaly
        anomaly_indices = cluster_data.index[labels == -1]
        combined.loc[anomaly_indices, 'AnomalyFlag'] = 1

# Step 8: Visualize
plt.figure(figsize=(10,6))
sns.boxplot(data=combined, x='ProfileLabel', y='EnergyUsage', hue='Apartment')
plt.title("Energy Usage by User Profile and Apartment")
plt.ylabel("Hourly Energy Usage (kWh)")
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 9: Save final results
combined.to_csv("user_profile_clusters_separated.csv", index=False)
print("âœ… Saved: user_profile_clusters_separated.csv")