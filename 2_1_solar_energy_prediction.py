# -*- coding: utf-8 -*-
"""2.1 Solar Energy Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18sjZWw3Ew8EfuAWYlKAx4b_HZCpDjf2B
"""

# Step 1: Imports and Data Loading
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.regularizers import l2
import datetime

# Load and clean the data
df = pd.read_csv("merged_solar_weather_10min.csv")
df['Timestamp'] = pd.to_datetime(df['Timestamp'])
df.sort_values("Timestamp", inplace=True)
df.set_index("Timestamp", inplace=True)

# Smooth inverter output
df['Inverter output (kWh)'] = df['Inverter output (kWh)'].rolling(window=3, min_periods=1).mean()
df.fillna(method='ffill', inplace=True)

# Step 2: Feature Engineering
df['hour'] = df.index.hour
df['day_of_year'] = df.index.dayofyear

# Add lag features (1h, 2h, 6h = 6, 12, 36 steps at 10-min interval)
df['lag_1h'] = df['Inverter output (kWh)'].shift(6)
df['lag_2h'] = df['Inverter output (kWh)'].shift(12)
df['lag_6h'] = df['Inverter output (kWh)'].shift(36)

# Drop rows with NaNs from lagging
df.dropna(inplace=True)

# Step 3: Define Features and Target
features = ['OutsideWeatherTemp', 'OutsideWeatherWind', 'hour', 'day_of_year', 'lag_1h', 'lag_2h', 'lag_6h']
target = 'Inverter output (kWh)'

# Mask for Jan–Mar 2024 as test set
mask_q1 = (df.index >= "2024-01-01") & (df.index <= "2024-03-31")
df_train = df[~mask_q1]
df_test = df[mask_q1]

# Scale the data
feature_scaler = MinMaxScaler()
target_scaler = MinMaxScaler()

X_train_scaled = feature_scaler.fit_transform(df_train[features])
y_train_scaled = target_scaler.fit_transform(df_train[[target]])

X_test_scaled = feature_scaler.transform(df_test[features])
y_test_scaled = target_scaler.transform(df_test[[target]])

# Combine for sequencing
train_data = np.hstack((X_train_scaled, y_train_scaled))
test_data = np.hstack((X_test_scaled, y_test_scaled))

# Step 4: Create Sequences
def create_sequences(data, timestamps, seq_len=72):
    X, y, ts = [], [], []
    for i in range(len(data) - seq_len):
        X.append(data[i:i+seq_len, :-1])
        y.append(data[i+seq_len, -1])
        ts.append(timestamps[i+seq_len])
    return np.array(X), np.array(y), np.array(ts)

SEQ_LEN = 72  # 12 hours
X_train, y_train, _ = create_sequences(train_data, df_train.index, SEQ_LEN)
X_test, y_test, time_test = create_sequences(test_data, df_test.index, SEQ_LEN)

# Step 5: Define and Train LSTM Model
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import LSTM, Dense, Dropout

input_layer = Input(shape=(X_train.shape[1], X_train.shape[2]))
x = LSTM(64, return_sequences=True, kernel_regularizer=l2(0.001))(input_layer)
x = Dropout(0.3)(x)
x = LSTM(32, kernel_regularizer=l2(0.001))(x)
x = Dropout(0.3)(x)
output_layer = Dense(1, activation='linear')(x)

model = Model(inputs=input_layer, outputs=output_layer)
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history = model.fit(
    X_train, y_train,
    validation_split=0.2,
    epochs=40,
    batch_size=32,
    callbacks=[early_stop],
    verbose=1
)

# Step 6: Evaluate and Save Results
y_pred = model.predict(X_test)
y_pred_inv = target_scaler.inverse_transform(y_pred)
y_test_inv = target_scaler.inverse_transform(y_test.reshape(-1, 1))

# Create result DataFrame
results = pd.DataFrame({
    "Timestamp": time_test,
    "Actual (kWh)": y_test_inv.flatten(),
    "Predicted (kWh)": y_pred_inv.flatten()
})

# Filter for valid
results = results.sort_values("Timestamp")
valid = results[results["Actual (kWh)"] > 0]

# Evaluation
mae = mean_absolute_error(valid["Actual (kWh)"], valid["Predicted (kWh)"])
r2 = r2_score(valid["Actual (kWh)"], valid["Predicted (kWh)"])
print(f"✅ MAE: {mae:.3f} kWh")
print(f"✅ R² Score: {r2:.3f}")

# Plot
plt.figure(figsize=(15,5))
plt.plot(valid["Timestamp"][:300], valid["Actual (kWh)"][:300], label="Actual", linewidth=2)
plt.plot(valid["Timestamp"][:300], valid["Predicted (kWh)"][:300], label="Predicted", linewidth=2)
plt.title("Solar Forecast (Lag Feature Enhanced LSTM)")
plt.ylabel("kWh")
plt.xticks(rotation=45)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Save
now = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
results.to_csv(f"improved_prediction_JanMar2024_LSTM_v2_{now}.csv", index=False)